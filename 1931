https://www.acmicpc.net/problem/1931
백준 1931 회의실 배정

유형 : 그리디 

순수 내 실력으로 푼 게 아니라서 사실상 풀었다고 말하지 못하겠다.
회의실 배정 등 이런 유형의 문제는 끝나는 시간을 기준으로 정렬을 해야 한다.
끝나는 시간을 기준으로 오름차순 정렬 후
- int lastEndTime = 0 : 선택한 회의의 끝나는 시간을 계속 업데이트하는 변수
- 회의 시작 시간 >= lastEndTime 일 경우 결과값에 반영한다. (회의 선택)

이 문제를 풀기 위해 알아야 했던 건
- lastEndTime 변수를 선언할 필요가 있다고 판단하는 능력
- 람다 사용법 (람다를 이용한 정렬)



import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());

        List<int[]> list = new ArrayList<>();

        for (int i = 0; i < N; i++) {
            String input = br.readLine();
            StringTokenizer st = new StringTokenizer(input);

            int startTime = Integer.parseInt(st.nextToken());
            int endTime = Integer.parseInt(st.nextToken());

            int[] arr = new int[2];
            arr[0] = startTime;
            arr[1] = endTime;
            list.add(arr);
        }
        
        Collections.sort(list, (a, b) -> {
            if (a[1] == b[1]) {
                return a[0] - b[0];  // 끝시간 같으면 시작시간 오름차순
            }
            return a[1] - b[1];      // 끝시간 오름차순
        });
        
        int count = 0;
        int lastEndTime = 0;


        for(int i=0; i<N; i++){
            int[] arr = list.get(i);
            if(arr[0]>=lastEndTime) {
                count++;
                lastEndTime = arr[1];
            }
        }
        System.out.println(count);
    }
}
